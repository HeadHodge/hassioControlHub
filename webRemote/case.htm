<!DOCTYPE html>
<html>
<head>
<title>ipRemote</title>
  
<script class='ipRemote caseScript' type="text/javascript" ipremote="/local/ipRemote/home.htm">
//##############################################
//### Use javascript's XMLHttpRequest Object
//### To Trigger HomeAssistant Events+'-'+controlValue
//### Via the RESTful Integration API
//##############################################

/////////////////////////// BEGIN PRIVATE NAMESPACE //////////////////////	
ipRemote = {
	case: {},
	map: {}
}; //Create Namespace;

(function($case, $map){ //invoke anonymous self executing function

//################
//### Global Variables
//################
var _isKeyDown, _wasMapRecalled;
var	_case, _filter, _map, _shortcuts, _zone, _category, _control, _commands, _overlay, _menu;
var _socket;

//################
//### sendCommand
//################
function sendCommand(command) {
//return alert(command);

	if(!_socket) socket = new WebSocket("ws://192.168.0.164:8080");

socket.onopen = function(e) {
  alert("[open] Connection established");
  alert("Sending to server");
  socket.send(`{"type": "hubControl", "command": "${command}", "id": "webClient", "zone": "masterBedroom"}`);
};

socket.onmessage = function(event) {
  alert(`[message] Data received from server: ${event.data}`);
};

socket.onclose = function(event) {
  if (event.wasClean) {
    alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
  } else {
    // e.g. server process killed or network down
    // event.code is usually 1006 in this case
    alert('[close] Connection died');
  }
};

socket.onerror = function(error) {
  alert(`[error] ${error.message}`);
};
};

//################
//### postCommand
//################
function postCommand(command, doneCallback, failCallback) {
return alert('postCommand: '+JSON.stringify(command));
var xhr = new XMLHttpRequest();

	if(!command) return;

	xhr.onload = function() {
		if (xhr.status != 200) {
			if(failCallback) return failCallback(command, xhr.status, xhr.statusText);
			console.log(`postCommand Failed: ${xhr.status}=${xhr.statusText}\nCommand:` + JSON.stringify(command)); // e.g. 404: Not Found
			return;
		};
		
		if(doneCallback) return doneCallback(JSON.parse(this.responseText), command);
		console.log(`postCommand Success ${xhr.status}`);
	};

	xhr.onerror = function() {
		console.log(`postCommand ERROR: ${xhr.status}=${xhr.statusText}, Command:\n` + JSON.stringify(command)); // e.g. 404: Not Found
	};

	xhr.open("POST", "http://192.168.0.160:5050/api/appdaemon/ipRemoteCommand");
	xhr.setRequestHeader("Content-Type", "text/plain");
	xhr.send(JSON.stringify(command));
};

//################
//### getFile
//################
function getFile(options, callBack) {
var xhr = new XMLHttpRequest();

	xhr.open('GET', options.filePath);
	xhr.send();
	
	xhr.onload = function() {
		//if (xhr.status != 200) return console.log(`Error ${xhr.status}: ${xhr.statusText}`); // e.g. 404: Not Found
		//alert(xhr.response);
		console.log(`getFile Success ${xhr.status}`);
		if(callBack) return callBack(xhr.response, options);
	};

	xhr.onerror = function() {
		console.log(`getFile ERROR: ${xhr.status}=${xhr.statusText}`); // e.g. 404: Not Found
	};
};

//################
//### removeMap
//################
function removeMap() {
	document.querySelector('#Zone').setAttribute('value', 'none');
	document.querySelector('#Category').setAttribute('value', 'none');
	document.querySelector('#Control').setAttribute('value', 'none');
	document.querySelector('#Zone').innerHTML = '0. None';
	document.querySelector('#Category').innerHTML = '0. None';
	document.querySelector('#Control').innerHTML = '0. None';

	_map.innerHTML = '';
	_filter.setAttribute('saved', 'false');
	_shortcuts.removeAttribute('display');
};

//################
//### saveMap
//################
function saveMap(command=undefined) {
	_zone.setAttribute('pin-value', _zone.getAttribute('value'));
	_zone.setAttribute('pin-text', _zone.getAttribute('text'));
	_category.setAttribute('pin-value', _category.getAttribute('value'));
	_category.setAttribute('pin-text', _category.getAttribute('text'));
	_control.setAttribute('pin-value', _control.getAttribute('value'));
	_control.setAttribute('pin-text', _control.getAttribute('text'));
	_control.setAttribute('pin-layout', _control.getAttribute('layout'));

	_filter.setAttribute('saved', 'true');
	if(command)	postCommand(command);
};

//################
//### loadTask
//################
function loadTask(content, command={"action": "default"}) {

	if(!command) return;
		
	switch(command.action) {
	case 'getFile':
		var	node = document.createElement('script');
		var script = document.head.querySelector('[class="taskScript"]');
		
		//Remove Current Script
		if(script) script.parentNode.removeChild(script);
		
		//Add New Script
		node.setAttribute('class', 'taskScript');
		node.setAttribute('type', 'text/javascript');
		node.innerHTML = content;
		document.head.appendChild(node);
		break;
	default:
		var zone = _zone.getAttribute('value');
		var control =_control.getAttribute('value');
		var filePath = './tasks/'+zone+'-'+control+'.js';
		
		//postCommand({"action": "getFile", "filePath": filePath, "format": "taskScript"}, loadTask);
		break;
	};
};

//################
//### loadMap
//################
function loadMap(content, command={"format": "default"}) {
var map = document.querySelector('Map.container');

	switch(command.format) {
	case 'markup':
		var zone = _zone.getAttribute('value');
		var category = _category.getAttribute('value');
		var control = _control.getAttribute('value');
		var filePath = './maps/'+category+'-'+control+'-'+zone+'.js';

		if(content) {
			map.innerHTML=content;
			map.setAttribute('htmfile', command.filePath);
		};

		map = document.querySelectorAll('[key]');

		for(var button = 0; button < map.length; button++) {
			map[button].addEventListener("click", keyClicked);
		};

		//postCommand({"action": "getFile", "filePath": filePath, "format": "control"}, loadMap);
		getFile({"filePath": filePath, "format": "control"}, loadMap);
		break;
		
	case 'control':
		var filePath = './helpers/'+_category.getAttribute('value') + '-' + _zone.getAttribute('value')+'.js';
		var	node, script;

		//Remove Current Script
		script = document.head.querySelector('[class="controlScript"]');
		if(script) script.parentNode.removeChild(script);

		//Add New Script
		node = document.createElement('script');
		node.setAttribute('class', 'controlScript');
		node.setAttribute('type', 'text/javascript');
		node.innerHTML = content;
		document.head.appendChild(node);
		
		//if($map.start || $map.loadHelper) postCommand({"action": "getFile", "filePath": filePath, "format": "helper"}, loadMap);
		break;
		
	case 'helper':
		var	node, script;
		
		//Remove Current Script
		script = document.head.querySelector('[class="helperScript"]');
		if(script) script.parentNode.removeChild(script);
		
		//Add New Script
		node = document.createElement('script');
		node.setAttribute('class', 'helperScript');
		node.setAttribute('type', 'text/javascript');
		node.innerHTML = content;
		document.head.appendChild(node);
		break;
		
	default:
		var filePath = './maps/'+_category.getAttribute('value') + '-' + _control.getAttribute('layout')+'.htm';

		_zone.innerHTML = _zone.getAttribute('text');
		_category.innerHTML = _category.getAttribute('text');
		_control.innerHTML = _control.getAttribute('text');
		
		//Clear Button Node and Botton Object Contents
		if(map) map.innerHTML = '';
		Object.keys($map).forEach(function(key) { delete $map[key]; });		
		
		//Start Loading Selected Map
		//postCommand({"action": "getFile", "filePath": filePath, "format": "markup"}, loadMap);
		getFile({"filePath": filePath, "format": "markup"}, loadMap);
		break;
	};
};

//################
//### recallMap
//################
function recallMap() {
	_overlay.removeAttribute("open");

	if(!_filter.getAttribute('saved')) return;
	
	//Abort if map already loaded
	if(
		_zone.getAttribute('pin-value') == _zone.getAttribute('value') &&
		_category.getAttribute('pin-value') == _category.getAttribute('value') &&
		_control.getAttribute('pin-value') == _control.getAttribute('value')
	) return;

	_zone.setAttribute('value', _zone.getAttribute('pin-value'));
	_zone.setAttribute('text', _zone.getAttribute('pin-text'));
	_category.setAttribute('value', _category.getAttribute('pin-value'));
	_category.setAttribute('text', _category.getAttribute('pin-text'));
	_control.setAttribute('value', _control.getAttribute('pin-value'));
	_control.setAttribute('text', _control.getAttribute('pin-text'));
	_control.setAttribute('layout', _control.getAttribute('pin-layout'));
	
	_filter.removeAttribute('saved');
	_filter.setAttribute('recalled', 'true');
	loadMap();
};

//################
//### closeMenu
//################
function closeMenu(charCode) {
var option = document.querySelector('Overlay[open] Option[key="'+charCode+'"]');
var name = option.getAttribute('name'), value = option.getAttribute('value'), layout = option.getAttribute('layout'), text = option.innerHTML;

	_overlay.removeAttribute("open");

	switch(name) {
	case 'zone':
		_zone.setAttribute('value', value);
		_zone.setAttribute('text', text);
		openMenu('category', 'Categories[zone="'+value+'"]');
		break;
	case 'category':
		_category.setAttribute('value', value);
		_category.setAttribute('text', text);

		if(value == 'task')
			openMenu('task', 'Tasks[zone="'+_zone.getAttribute('value')+'"][category="'+value+'"]');
		else
			openMenu('control', 'Controls[zone="'+_zone.getAttribute('value')+'"][category="'+value+'"]');

		break;
	case 'control':
		if(value == 'none') return;

		_control.setAttribute('value', value);
		_control.setAttribute('text', text);

		if(layout)
			_control.setAttribute('layout', layout);
		else
			_control.setAttribute('layout', value);
		
		_filter.removeAttribute('recalled');
		loadMap();
		break;
	case 'task':
		if(value == 'none') return;
		
		_control.setAttribute('value', value);
		_control.setAttribute('text', text);

		loadTask();
		break;
	};
};

//################
//### openMenu
//################
function openMenu(optionName='zone', optionCategory='Zones') {
var options=document.querySelector(optionCategory);
var buttons;

//Reset Selections
	if(optionName == 'zone') {
		_menu.removeAttribute('zoneValue');
		_menu.removeAttribute('zoneOption');
		_menu.removeAttribute('categoryValue');
		_menu.removeAttribute('categoryOption');
		_menu.removeAttribute('controlValue');
		_menu.removeAttribute('controlOption');
		_menu.removeAttribute('taskValue');
		_menu.removeAttribute('taskOption');
	};
	
//Add Options
	if(!options) {
		options=document.querySelector('Notes[nooptions]');
		options.querySelector('option.text').innerHTML = '*** ERROR: '+optionName.toUpperCase()+' OPTIONS MISSING ***';
		options.querySelector('option.button').setAttribute('name', optionName);
		options.querySelector('option.button').setAttribute('value', 'none');
	};
	
	_menu.innerHTML = options.innerHTML;
	_overlay.setAttribute("open", "");

	buttons = _menu.querySelectorAll('Option.button');	
	for(var button = 0; button < buttons.length; button++) {
		buttons[button].addEventListener("click", keyClicked);
	};
};

//################
//### keyPressed
//################
function keyPressed(keyChar) {
var open=document.querySelector('Overlay[open]');
var	button=document.querySelector("[key='"+keyChar+"']");

	//Simulate Button Press
	if(button) {
		button.setAttribute("pressed", "");
		setTimeout(function(){button.removeAttribute("pressed");}, 200);
	}
	
	//Check for Input Key
	if(keyChar == '[') return openMenu();
	
	//Check for Open Menu
	if(document.querySelector('Overlay[open]')) {
		if(keyChar == 'i') return recallMap();

		if(document.querySelector("Overlay[open] Option[key='"+keyChar+"']"))
			return closeMenu(keyChar);
		else
			return closeMenu('0');
	};

return sendCommand(keyChar);
	
	if($map.keyPressed && $map.keyMap[keyChar]) //Check for valid key handler
		$map.keyPressed(keyChar);
	else if(keyChar == '`') //Check for unhandled Power Key
		removeMap();
};

//################
//### keyUp
//################
function keyUp(event) {
	_isKeyDown = undefined;
};

//################
//### keyDown
//################
function keyDown(event) {
	if(_isKeyDown || event.keyCode < 32) return;
	_isKeyDown = true;
	keyPressed(event.key);
};
  
//################
//### keyClicked
//################
function keyClicked(event) {
var button = event.currentTarget;
var key = button.attributes['key'].nodeValue;

	if(!key) return;
	keyPressed(key);
};

//################
//### monitorPulse
//################
function monitorPulse() {
	return;
	setTimeout(function(){
		postCommand({"action": "getPulse"}, function(reply){console.log(reply)});
		monitorPulse();
	}, 60000);
};

//################
//### start
//################
function start() {
var params = new URLSearchParams(window.location.search);

	_case = document.querySelector('Case');
	_commands = document.querySelector('Commands');
	_filter = document.querySelector('Filter');
	_map = document.querySelector('Map');
	_shortcuts = document.querySelector('Shortcuts');
	_overlay = document.querySelector('Overlay');
	_menu = document.querySelector('Menu');
	_zone = document.querySelector('#Zone');
	_category = document.querySelector('#Category');
	_control = document.querySelector('#Control');

	document.querySelector('commands > [key="["]').addEventListener("click", keyClicked);
	document.querySelector('commands > [key="`"]').addEventListener("click", keyClicked);
	window.addEventListener("keydown", keyDown);
	window.addEventListener("keyup", keyUp);
	
	//Start Pulse Monitor
	monitorPulse();
};

//################
//### loadOverlay
//################
function loadOverlay(content, command={"filePath": "default"}) {
	if(content) document.querySelector('body').innerHTML += content;		
	
	switch(command.filePath) {
	case './menus/zones.htm':
		getFile({"filePath": "./menus/categories.htm"}, loadOverlay);
		break;
	case './menus/categories.htm':
		getFile({"filePath": "./menus/controls.htm"}, loadOverlay);
		break;
	case './menus/controls.htm':
		getFile({"filePath": "./menus/tasks.htm"}, loadOverlay);
		break;
	case './menus/tasks.htm':
		getFile({"filePath": "./menus/notes.htm"}, loadOverlay);
		break;
	case './menus/notes.htm':
		start();
		break;
	default:
		getFile({"filePath": "./menus/zones.htm"}, loadOverlay);
		break;
	};
};

//################
//###   MAIN   ###
//################
//debugger;
	//Make Variables Public
	$case.saveMap = saveMap;
	$case.recallMap = recallMap;
	$case.removeMap = removeMap;
	$case.postCommand = postCommand;
	$case.keyPressed = keyPressed;
	
	window.addEventListener("load", function(){loadOverlay()}, false);
//alert('hi psi');
/////////////////////////// END PRIVATE NAMESPACE //////////////////////	
})(ipRemote.case, ipRemote.map);
</script>

<style class='ipRemote caseStyle'>
body {
	user-select: none;
	background: Gray;
}

Case {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	align-items: stretch;
	margin: 0 auto;
	margin-top: 4vh;
	width: 60vh;
	height: 92vh;
	background: Teal;
	border-style: none solid;
	border-width: 1vh;
	border-radius: 1.5vh;
	border-color: LightGreen;
}

@media (orientation: portrait) {
	Case {
		margin-top: 2.5vh;
		width: 90vw;
		height: 95vh;
		border-width: 2vh;
	}
}  

Filter, Map {
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	align-items: flex-start;
}

Filter, Commands {
	margin-left: -.2%;
}

#Zone, #Category, #Control {
	font-size: 1.8vh;
	width:33%;
	margin-left: .5vh;
	padding-top: .2vh;
	text-align: center;
	overflow: hidden;
	background: LightBlue;
}

#Control {
	margin-right:.5vh;
}

Map {
	width: 100%;
	height: 90%;
	margin: 5% 0;
}

Shortcuts.row {
	display: none;
	margin: 1vh 0;
}

Shortcuts.row[display] {
	display: flex;
}

Commands > .button {
	width: 20%;
	background: LightBlue;
    cursor: pointer;
}

Overlay {
	position: fixed;
	display: none;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: rgba(0,0,0,0.5);
	z-index: 30;
}

Overlay[open] {
	display: block;
}

Menu {
	margin: 0;
	padding: 0;
	position: absolute;
	width: 30%;
	height: 70%;
	font-size: 10vh;
	color: white;
	background: LightCoral;
  	font-weight: bold;
	font-size: 3.5vh;

	border: solid;
	border-color: Yellow;
	border-width: 1vh;
	border-radius: 4vh;
	top: 50%;
	left: 50%;
	transform: translate(-50%,-50%);
	z-index: 20;
	-ms-transform: translate(-50%,-50%);
}

@media (orientation: portrait) {
	Menu{
		width: 80%;
		height: 90%;
	}
}

Option.title {
	margin-top: 1vh; 
	text-align: center;
	font-weight: bold;
}

Option.text {
	margin-top: 1vh; 
	text-align: center;
	font-size: 2vh;
}

Option.button {
	margin: 3vh 0 0 3vh; 
}

Zones, Categories, Controls, Tasks, Notes {
	display: none;
}

.row {
	display: flex;
	flex-direction: row;
	height: 5vh;
	width: 100.5%;
	justify-content: space-around;
}

.row.headings, .row.commands {
	height: 2vh;
	line-height: 2vh;
	width: 100.5%;
	font-size: 1.8vh;
	font-weight: bold;
	background: LightGreen;
	text-align: center;
}

.row.filter {
	height: 2.4vh;
	width: 100%;
	margin-top: .2vh;
}

.row.headings > div {
	width: 30%;
}

.row.shortcuts {
	height: 3vh;
}

.row.shortcuts > .box {
	font-size: 2vh;
	font-weight: bold;
	line-height: 3.5vh;
	width: 20%;
}

.row.background1 > .button {
	background: Wheat;
}

.row.background2 > .button {
	background: Gold;
}

.row > .button.red {
	background: Red;
}

.row > .button.green {
	background: LightGreen;
}

.row > .button.yellow {
	background: Yellow;
}

.row > .button.blue {
	background: LightBlue;
}

.box {
	width: 30%;
	text-align: center;
	font-weight: bold;
	font-size: 2.5vh;
	line-height: 5vh;
}

.button {
    cursor: pointer;
	border-radius: 15vh;
}

Commands .button {
	border-radius: 0;
}

[hidden] {
    display: none !important;
}

[pressed] {
	background: Gray !important;
}
</style>
</head>

<body id="ipRemote">
<Case>
	<Filter class="container">
		<div class="row headings">
			<div>ZONE</div>
			<div>CATEGORY</div>
			<div>CONTROL</div>
		</div>
		
		<div class="row filter">
			<Code id="Zone">0. None</Code>
			<Code id="Category">0. None</Code>
			<Code id="Control">0. None</Code>
		</div>
	</Filter>
	
	<Map class="container">
	</Map>
	
	<Shortcuts class="row shortcuts">
		<div class="box button red" key="{"></div>
		<div class="box button green" key="}"></div>
		<div class="box button yellow" key="|"></div>
		<div class="box button blue" key=":"></div>
	</Shortcuts>
   
	<Commands class="row commands">
		<div class="button" key="[">INPUT</div>  
		<div class="button" key="j">INFO</div>
		<div class="button" key="`">OFF</div>  
	</Commands>
</Case>

<Overlay>
	<Menu id="Options"></Menu>
</Overlay>
</body>
</html>