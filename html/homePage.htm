<!DOCTYPE html>
<html>
<head>
<title>webRemote</title>
  
<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>

<script class='webRemote caseScript' type="text/javascript" webRemote="/local/webRemote/home.htm">
//##############################################
//### Use javascript's XMLHttpRequest Object
//### To Trigger HomeAssistant Events+'-'+skinValue
//### Via the RESTful Integration API
//##############################################

/////////////////////////// BEGIN PRIVATE NAMESPACE //////////////////////	
webRemote = {
	case: {},
	map: {}
}; //Create Namespace;

webRemote = (function($case, $map){ //invoke anonymous self executing function

//################
//### Global Variables
//################
var authToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI1YmM0ZGYxNGY4ZGE0MTdkYTNhZjdkNjkwYzg0NDQ2ZSIsImlhdCI6MTYxMzAxMDQ4MiwiZXhwIjoxOTI4MzcwNDgyfQ.MffxNYX4VssITLgdZBPilKTq3p4R9RuoQP2yeeoyyPw';

document.cookie = 'X-Authorization=' + authToken + '; path=/';
const _broker = new Paho.MQTT.Client('192.168.0.160', 1883, 'test20');
const _brokerUrl = 'mqtt://192.168.0.160:1883'; //test broker: 'mqtt://test.mosquitto.org'
const _brokerOptions = {
	onSuccess	:onConnect,
	userName	:"admin", 
	password	:"pepper"
};

var _isKeyDown, _wasMapRecalled;
var	_case, _filter, _map, _shortcuts, _zone, _category, _skin, _commands, _overlay, _menu;
var _socket, _isConnected;


// called when the client connects
function onConnect() {
  // Once a connection has been made, make a subscription and send a message.
  console.log("onConnect");
  client.subscribe("World");
  message = new Paho.MQTT.Message("Hello");
  message.destinationName = "World";
  client.send(message);
};


//##########################################
const connectBroker = function(task) {
//##########################################
console.log(`Enter connectBroker`);

/*
	_broker.on('connect', function() {
		console.log(`Enter broker connected`);
	});
 
	_broker.on('message', function(topic, message) {
		console.log(`Enter broker message received, topic: ${topic}, message: ${message}`);
		//onInput(message);
		onInput(JSON.parse(message));
	});

	_broker.on("error", function(error) {
		console.log(`Enter broker failed: ${error.toString()}`);
		if(_broker) _broker.end();
		_broker = null;
	});	

	_broker.on("close", function() {
		console.log(`Enter broker closed`);
		broker = null;
	});	
*/
	_broker.onConnectionLost=function(e){
		console.log('Cosed');
		console.log(e);
	}	
var authToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI1YmM0ZGYxNGY4ZGE0MTdkYTNhZjdkNjkwYzg0NDQ2ZSIsImlhdCI6MTYxMzAxMDQ4MiwiZXhwIjoxOTI4MzcwNDgyfQ.MffxNYX4VssITLgdZBPilKTq3p4R9RuoQP2yeeoyyPw';

document.cookie = 'X-Authorization=' + authToken + '; path=/';

	//if(_broker) _broker.end(); //Close existing broker
	_broker.connect(_brokerOptions);
};

//##########################################
const sendTask = function(task) {
//##########################################
console.log(`Enter sendTask`);

	if(!broker) connectBroker(task);
	broker.publish('controlInput', task);
};

//################
//### openConnection
//################
function openConnection(onConnected) {
console.log("Enter openConnection");

	if(_isConnected) return;
	
	_socket = new WebSocket("ws://192.168.0.164:8080");
	
	_socket.onopen = function(event) {
		console.log("****Server Connected****");
		_isConnected = true;
		if(onConnected) onConnected();
	};
	
	_socket.onclose = function(event) {
		console.log("****Server Closed****");
		_socket = null;
		_isConnected = null;
		openConnection();
	};

	_socket.onerror = function(error) {
		console.log(`****Server Error: ${error.message}****`);
		//_isConnected = null;
		//openConnection();
		//_socket.close();
		//_socket = null;
	};
};

//################
//### sendCommand
//################
function sendCommand(command) {
console.log(`Enter sendCommand, command: ${command}`);

	if(!_isConnected) return;
	
	_socket.onmessage = function(event) {
		console.log(`[message] Data received from server: ${event.data}`);
	};
	
	_socket.send(`{"type": "command", "command": "${command}", "id": "webClient", "zone": "`+_zone.getAttribute('value')+`"}`);
};

//################
//### getFile
//################
function getFile(fileName, callBack) {
var xhr = new XMLHttpRequest();

	xhr.open('GET', '/..'+fileName);
	xhr.send();
	
	xhr.onload = function() {
		if (xhr.status != 200) return console.log(`Error ${xhr.status}: ${xhr.statusText}`); // e.g. 404: Not Found
		if(typeof callBack != 'undefined') callBack(xhr.response, fileName);
	};

	xhr.onerror = function() {
		notify("getFile Request failed");
	};
};

//################
//### getFile
//################
function xgetFile(fileName, callBack) {
console.log(`Enter getFile, fileName: ${fileName}`);
return loadFile(fileName, callBack);

	if(!_isConnected) return;
	
	_socket.onmessage = function(event) {
		console.log(`Reply received from server`);
		callBack(event.data, fileName);
	};

	_socket.send(`{"type": "fileName", "fileName": "${fileName}"}`);
};

//################
//### loadTask
//################
function loadTask(content, command={"action": "default"}) {

	if(!command) return;
		
	switch(command.action) {
	case 'getFile':
		var	node = document.createElement('script');
		var script = document.head.querySelector('[class="taskScript"]');
		
		//Remove Current Script
		if(script) script.parentNode.removeChild(script);
		
		//Add New Script
		node.setAttribute('class', 'taskScript');
		node.setAttribute('type', 'text/javascript');
		node.innerHTML = content;
		document.head.appendChild(node);
		break;
	default:
		var zone = _zone.getAttribute('value');
		var skin =_skin.getAttribute('value');
		var filePath = '/tasks/'+zone+'-'+skin+'.js';
		
		//getFile({"action": "getFile", "filePath": filePath, "format": "taskScript"}, loadTask);
		break;
	};
};

//################
//### loadSkin
//################
function loadSkin(content, filePath) {
console.log(`Enter loadSkin, filePath: ${filePath}`);
var Skin = document.querySelector('Skin.container');

	switch(filePath) {
	case '/skin/' + _skin.getAttribute('value')+'.htm':
		var keys;

		if(content) {
			Skin.setAttribute('htmfile', filePath);
			Skin.innerHTML=content;
		};

		keys = document.querySelectorAll('[key]');

		for(var button = 0; button < keys.length; button++) {
			keys[button].addEventListener("click", keyClicked);
		};

		break;

	default:
		if(filePath) return;
		
		var filePath = '/skin/' + _skin.getAttribute('value')+'.htm';

		_zone.innerHTML = _zone.getAttribute('text');
		_skin.innerHTML = _skin.getAttribute('text');
		Skin.innerHTML = '';
		getFile(filePath, loadSkin);
		break;
	};
};

//################
//### closeMenu
//################
function closeMenu(charCode) {
var option = document.querySelector('Overlay[open] Option[key="'+charCode+'"]');
var name = option.getAttribute('name'), value = option.getAttribute('value'), layout = option.getAttribute('layout'), text = option.getAttribute('value'); //, text = option.innerHTML;

	_overlay.removeAttribute("open");

	switch(name) {
	case 'zone':
	var skin = option.getAttribute('skin');
	
		_zone.setAttribute('value', value);
		_zone.setAttribute('text', value);
		_skin.setAttribute('value', skin);
		_skin.setAttribute('text', skin);
		loadSkin();
/*
		if(value == 'task')
			openMenu('task', 'Tasks[zone="'+_zone.getAttribute('value')+'"][category="media"]');
		else
			openMenu('skin', 'Skins[zone="'+_zone.getAttribute('value')+'"][category="media"]');
*/
		break;
	case 'skin':
		if(value == 'none') return;

		_skin.setAttribute('value', value);
		_skin.setAttribute('text', text);

		if(layout)
			_skin.setAttribute('layout', layout);
		else
			_skin.setAttribute('layout', value);
		
		_filter.removeAttribute('recalled');
		
		loadSkin();
		break;
	case 'task':
		if(value == 'none') return;
		
		_skin.setAttribute('value', value);
		_skin.setAttribute('text', text);

		loadTask();
		break;
	};
};

//################
//### openMenu
//################
function openMenu(optionName='zone', optionCategory='Zones') {
console.log(`Enter openMenu,  optionName: ${optionName}, optionCategory: ${optionCategory}`);
var options=document.querySelector(optionCategory);
var buttons;

	//Reset Selections
	if(optionName == 'zone') {
		_menu.removeAttribute('zoneValue');
		_menu.removeAttribute('zoneOption');
		_menu.removeAttribute('skinValue');
		_menu.removeAttribute('skinOption');
		_menu.removeAttribute('taskValue');
		_menu.removeAttribute('taskOption');
	};
	
	//Add Options
	if(!options) {
		options=document.querySelector('Notes[nooptions]');
		options.querySelector('option.text').innerHTML = '*** ERROR: '+optionName.toUpperCase()+' OPTIONS MISSING ***';
		options.querySelector('option.button').setAttribute('name', optionName);
		options.querySelector('option.button').setAttribute('value', 'none');
	};
	
	_menu.innerHTML = options.innerHTML;
	_overlay.setAttribute("open", "");

	buttons = _menu.querySelectorAll('Option.button');	
	for(var button = 0; button < buttons.length; button++) {
		buttons[button].addEventListener("click", keyClicked);
	};
};

//################
//### keyPressed
//################
function keyPressed(keyChar) {
var open=document.querySelector('Overlay[open]');
var	button=document.querySelector("[key='"+keyChar+"']");

	//Simulate Button Press
	if(button) {
		button.setAttribute("pressed", "");
		setTimeout(function(){button.removeAttribute("pressed");}, 200);
	}
	
	//Check for Input Key
	if(keyChar == '[') return openMenu();
	
	//Check for Open Menu
	if(document.querySelector('Overlay[open]')) {
		if(keyChar == 'i') return recallMap();

		if(document.querySelector("Overlay[open] Option[key='"+keyChar+"']"))
			return closeMenu(keyChar);
		else
			return closeMenu('0');
	};

	return sendCommand(keyChar);
};

//################
//### keyUp
//################
function keyUp(event) {
	_isKeyDown = undefined;
};

//################
//### keyDown
//################
function keyDown(event) {
	if(_isKeyDown || event.keyCode < 32) return;
	_isKeyDown = true;
	keyPressed(event.key);
};
  
//################
//### keyClicked
//################
function keyClicked(event) {
var button = event.currentTarget;
var key = button.attributes['key'].nodeValue;

	if(!key) return;
	keyPressed(key);
};

//################
//### start
//################
function start() {
var params = new URLSearchParams(window.location.search);

	_case = document.querySelector('Case');
	_commands = document.querySelector('Commands');
	_filter = document.querySelector('Filter');
	_map = document.querySelector('Map');
	_shortcuts = document.querySelector('Shortcuts');
	_overlay = document.querySelector('Overlay');
	_menu = document.querySelector('Menu');
	_zone = document.querySelector('#Zone');
	_category = document.querySelector('#Category');
	_skin = document.querySelector('#Skin');

	document.querySelector('commands > [key="["]').addEventListener("click", keyClicked);
	window.addEventListener("keydown", keyDown);
	window.addEventListener("keyup", keyUp);
	
	openMenu();
};

//################
//### loadCase
//################
function loadCase(content, filePath=null) {
console.log(`Enter loadCase, filePath: ${filePath}`);

	if(content) document.querySelector('body').innerHTML += content;		
	
	switch(filePath) {
	case '/skin/case.htm':
		getFile("/menus/zones.htm", loadCase);
	case '/menus/zones.htm':
		getFile("/menus/categories.htm", loadCase);
		break;
	case '/menus/categories.htm':
		getFile("/menus/skins.htm", loadCase);
		break;
	case '/menus/skins.htm':
		getFile("/menus/tasks.htm", loadCase);
		break;
	case '/menus/tasks.htm':
		getFile("/menus/notes.htm", loadCase);
		break;
	case '/menus/notes.htm':
		//start();
		//filePath=null;
		break;
	default:
		if(!filePath) getFile("/skin/case.htm", loadCase);
		break;
	};
};

//################
//###   MAIN   ###
//################
//debugger;

	window.addEventListener("load", function(){
		//openConnection(loadCase);
		connectBroker();
		loadCase();
	});

/////////////////////////// END PRIVATE NAMESPACE //////////////////////	
})(webRemote.case, webRemote.map);
</script>
</head>
</html>